/**
 * Module dependencies.
 */

const app = require('./app');
const debug = require('debug')('demo:server');
const http = require('http');
const sooda = require('../../lib/sooda');
const SoodaUser = require('../../lib/user');

/**
 * Get port from environment and store in Express.
 */

const parseArgs = require('minimist') (process.argv.slice(2));
const port = parseArgs.port || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  'use strict';
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  'use strict';
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const roomName = 'soodaWebRoom';
const appName = 'soodaWeb';
sooda.init(server, appName);

const io = require('socket.io-client');
const socket = io.connect('http://localhost:3000');
const admin = new SoodaUser(socket,appName,'admin','admin');

socket.once('connected', function(){
    //create a room
    admin.create(roomName).then(
      function(roomName){
        return admin.join(roomName);
      }, function(err){
        console.error('Error while creating a room : ' + err);
      }
    );
});